import asyncio, tkinter.filedialog, tkinter.messagebox

try:
    import bin.helpers.load as load
    import bin.helpers.render as render
    import bin.helpers.ui as ui

except KeyError as key:
    tkinter.messagebox.showerror('Module Load Error', f'Missing key: {key}\n\nKey is likely missing from config. Reinstall config.json or add it back.')
    exit()

except Exception as exception:
    tkinter.messagebox.showerror('Module Load Error', f'Unexpected error while loading modules: {exception}\n\nAre your the load, render, and ui modules in bin/helpers?')
    exit()

def generate(master_dict: dict[str: str | int], entries: list[dict[str: str | bool]]) -> None:
    try:
        infographic = render.generate_infographic(master_dict, entries)

    except Exception as exception:
        tkinter.messagebox.showerror('Infographic Error', f'Unexpected error while making the infographic: {exception}\n\nMake sure you didn\'t leave any fields empty.')
        return
    
    save_path = tkinter.filedialog.asksaveasfilename(confirmoverwrite = True, initialdir = './Infographics', initialfile = 'infographic.png', filetypes = [('PNG', '*.png')])
    if save_path == '':
        return
    
    infographic.save(save_path.removesuffix('.png') + '.png', 'PNG')

def preview(master_dict: dict[str: str | int], entries: list[dict[str: str | bool]]) -> None:
    try:
        infographic = render.generate_infographic(master_dict, entries)

    except Exception as exception:
        tkinter.messagebox.showerror('Infographic Error', f'Unexpected error while making the infographic: {exception}\n\nMake sure you didn\'t leave any fields empty.')
        return

    infographic.show()

def main():
    REQUIRED_KEYS = {
                    'XML URLs',
                    'Sheet URL',
                    'Upscale',
                    'Large Size',
                    'Small Size',
                    'Blueprint Size',
                    'Quantity Font Size',
                    'Auto Update',
                    'Frequency Options',
                    'Style'
                    }
    updated = False

    try:
        config = load.get_config()
        if not set(config.keys()).issubset(REQUIRED_KEYS):
            raise KeyError(config.keys())
        
    except KeyError: # less likely to happen due to most keys being accessed during module imports except URLs
        tkinter.messagebox.showerror('Config Error', f'Keys missing from config.json: {REQUIRED_KEYS.difference(set(config.keys()))}')
        return

    except Exception as exception:
        tkinter.messagebox.showerror('Config Error', f'Unexpected error while loading config: {exception}, is your config.json in the bin folder?')
        return

    try:
        missing_folders = load.check_folders()
        if missing_folders != None: raise NotADirectoryError(str(missing_folders))

        missing_files = load.check_files()
        if missing_files != None: raise FileNotFoundError(str(missing_files))

    except NotADirectoryError as exception:
        tkinter.messagebox.showerror('Load Error', f'Following folders were missing and made for you: {exception}\n\nIf bin, bin/icons, or bin/helpers were made, reinstall.')

    except FileNotFoundError as exception:
        if str(exception) == "['./bin/json/master.json']":
            if tkinter.messagebox.askokcancel('Master Missing', 'File master.json is missing, but can be generated by downloading xml and sheets. File master.json is essential to functioning. Proceed?'):
                asyncio.run(load.setup())
                updated = True
            else:
                return

    except Exception as exception:
        tkinter.messagebox.showerror('Load Error', f'Error during loading: {exception}')
        return

    if not updated and config['Auto Update'] == 1:
        asyncio.run(load.setup())

    master_dict = load.get_master_dict()

    app = ui.App()

    app.generate_button.config(command = lambda: generate(master_dict, app.get_quest_info()))
    app.preview_button.config(command = lambda: preview(master_dict, app.get_quest_info()))
    
    app.settings_menubutton.menu.add_checkbutton(label = 'Auto Update', variable = app.options_auto_update, command = lambda: load.update_config('Auto Update', app.options_auto_update.get()))
    app.settings_menubutton.menu.add_command(label = 'Update', command = lambda: asyncio.run(load.setup()))
    app.settings_menubutton.menu.add_command(label = 'Build JSON Only', command = lambda: load.parse_all())

    app.root.mainloop()

if __name__ == '__main__':
    main()